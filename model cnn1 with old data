{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "scratch_cnn_1.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "mount_file_id": "https://github.com/prtk0007/Chest_Xray_detection/blob/exp_binary/scratch_cnn_1.ipynb",
      "authorship_tag": "ABX9TyMPiFwqGfd47vNqTZ93CmDd",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/prtk0007/Chest_Xray_detection/blob/exp_binary/model%20cnn1%20with%20old%20data\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "R1XmqXRerEIn"
      },
      "source": [
        "import os\n",
        "os.environ['KAGGLE_CONFIG_DIR'] = \"/content\"\n",
        "!kaggle datasets download -d paultimothymooney/chest-xray-pneumonia\n",
        "#! kaggle datasets download -d pcbreviglieri/pneumonia-xray-images\n",
        "!unzip \\*.zip"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OPQ6QDVlCIzI"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fqJZa3arDwwJ"
      },
      "source": [
        "train_path = '/content/chest_xray/train'\n",
        "test_path = '/content/chest_xray/test'\n",
        "valid_path = '/content/chest_xray/test'"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HARIiHrzEySz"
      },
      "source": [
        "\n",
        "#Define standard parameter values\n",
        "batch_size = 32\n",
        "img_height = 500\n",
        "img_width = 500\n"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2HqL0LBA3mOC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "124233d5-ccef-47d0-832b-26813fc68ae0"
      },
      "source": [
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator, array_to_img\n",
        "\n",
        "image_gen = ImageDataGenerator(\n",
        "                                   rescale = 1./255,\n",
        "                                   shear_range = 0.2,\n",
        "                                   zoom_range = 0.2,\n",
        "                                   horizontal_flip = True,\n",
        "                                   fill_mode='nearest'\n",
        "                               )  \n",
        "\n",
        "test_data_gen = ImageDataGenerator(rescale = 1./255)\n",
        "\n",
        "\n",
        "\n",
        "train = image_gen.flow_from_directory(\n",
        "    train_path,\n",
        "    target_size=(img_height, img_width),\n",
        "    color_mode='grayscale',\n",
        "    class_mode='binary',\n",
        "    batch_size=batch_size\n",
        "                                      )\n",
        "\n",
        "test = test_data_gen.flow_from_directory(\n",
        "      test_path,\n",
        "      target_size=(img_height, img_width),\n",
        "      color_mode='grayscale',shuffle=False,\n",
        "      class_mode='binary',\n",
        "      batch_size=batch_size\n",
        "      )\n",
        "valid = test_data_gen.flow_from_directory(\n",
        "      valid_path,\n",
        "      target_size=(img_height, img_width),\n",
        "      color_mode='grayscale',\n",
        "      class_mode='binary', \n",
        "      batch_size=batch_size\n",
        "      )"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 5216 images belonging to 2 classes.\n",
            "Found 624 images belonging to 2 classes.\n",
            "Found 624 images belonging to 2 classes.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RfeXspblliw3"
      },
      "source": [
        "from tensorflow.keras.models import Sequential,load_model,save_model\n",
        "from tensorflow.keras.layers import Dense,Conv2D,Flatten,MaxPooling2D,Dropout,BatchNormalization\n",
        "from tensorflow.keras.callbacks import EarlyStopping,ReduceLROnPlateau"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B5weZVzmiU6n"
      },
      "source": [
        "# let's build the CNN model\n",
        "\n",
        "cnn = Sequential()\n",
        "\n",
        "cnn.add(Conv2D(32, (3, 3), activation=\"relu\", input_shape=(img_width, img_height, 1)))\n",
        "cnn.add(BatchNormalization())\n",
        "cnn.add(MaxPooling2D(pool_size = (2, 2)))\n",
        "\n",
        "cnn.add(Conv2D(32, (3, 3), activation=\"relu\", input_shape=(img_width, img_height, 1)))\n",
        "cnn.add(MaxPooling2D(pool_size = (2, 2)))\n",
        "\n",
        "cnn.add(Conv2D(32, (1, 1), activation=\"relu\", input_shape=(img_width, img_height, 1)))\n",
        "cnn.add(MaxPooling2D(pool_size = (2, 2)))\n",
        "\n",
        "cnn.add(Conv2D(64, (3, 3), activation=\"relu\", input_shape=(img_width, img_height, 1)))\n",
        "cnn.add(MaxPooling2D(pool_size = (2, 2)))\n",
        "\n",
        "cnn.add(Conv2D(64, (1, 1), activation=\"relu\", input_shape=(img_width, img_height, 1)))\n",
        "cnn.add(MaxPooling2D(pool_size = (2, 2)))\n",
        "\n",
        "cnn.add(Conv2D(128, (3, 3), activation=\"relu\", input_shape=(img_width, img_height, 1)))\n",
        "cnn.add(MaxPooling2D(pool_size = (2, 2)))\n",
        "\n",
        "cnn.add(Flatten())\n",
        "\n",
        "cnn.add(Dense(activation = 'relu', units = 256))\n",
        "cnn.add(Dropout(0.3))\n",
        "cnn.add(Dense(activation = 'relu', units = 128))\n",
        "cnn.add(Dropout(0.1))\n",
        "cnn.add(Dense(activation = 'sigmoid', units = 1))\n",
        "\n",
        "\n",
        "cnn.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_N-fJYMgwvxR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fa78e442-3175-4e89-ffe4-43ee979f0ab8"
      },
      "source": [
        "cnn.summary()"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_1\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d_1 (Conv2D)            (None, 498, 498, 32)      320       \n",
            "_________________________________________________________________\n",
            "batch_normalization (BatchNo (None, 498, 498, 32)      128       \n",
            "_________________________________________________________________\n",
            "max_pooling2d (MaxPooling2D) (None, 249, 249, 32)      0         \n",
            "_________________________________________________________________\n",
            "conv2d_2 (Conv2D)            (None, 247, 247, 32)      9248      \n",
            "_________________________________________________________________\n",
            "max_pooling2d_1 (MaxPooling2 (None, 123, 123, 32)      0         \n",
            "_________________________________________________________________\n",
            "conv2d_3 (Conv2D)            (None, 123, 123, 32)      1056      \n",
            "_________________________________________________________________\n",
            "max_pooling2d_2 (MaxPooling2 (None, 61, 61, 32)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_4 (Conv2D)            (None, 59, 59, 64)        18496     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_3 (MaxPooling2 (None, 29, 29, 64)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_5 (Conv2D)            (None, 29, 29, 64)        4160      \n",
            "_________________________________________________________________\n",
            "max_pooling2d_4 (MaxPooling2 (None, 14, 14, 64)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_6 (Conv2D)            (None, 12, 12, 128)       73856     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_5 (MaxPooling2 (None, 6, 6, 128)         0         \n",
            "_________________________________________________________________\n",
            "flatten (Flatten)            (None, 4608)              0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 256)               1179904   \n",
            "_________________________________________________________________\n",
            "dropout (Dropout)            (None, 256)               0         \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 128)               32896     \n",
            "_________________________________________________________________\n",
            "dropout_1 (Dropout)          (None, 128)               0         \n",
            "_________________________________________________________________\n",
            "dense_2 (Dense)              (None, 1)                 129       \n",
            "=================================================================\n",
            "Total params: 1,320,193\n",
            "Trainable params: 1,320,129\n",
            "Non-trainable params: 64\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Aiw4SPH28S_S"
      },
      "source": [
        "\n",
        "early = EarlyStopping(monitor=\"val_loss\", \n",
        "                      mode=\"min\", \n",
        "                      patience=4)\n",
        "\n",
        "learning_rate_reduction = ReduceLROnPlateau(monitor='val_loss', patience = 2, verbose=1,factor=0.1, min_lr=0.0001)\n",
        "\n",
        "callbacks_list = [ early, learning_rate_reduction]"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FhMkSOX2-PR3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b3e312ae-bfc8-4650-8331-0416a2e95d5f"
      },
      "source": [
        "from sklearn.utils.class_weight import compute_class_weight\n",
        "weights = compute_class_weight('balanced', np.unique(train.classes), train.classes)\n",
        "cw = dict(zip( np.unique(train.classes), weights))\n",
        "print(cw)"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{0: 1.9448173005219984, 1: 0.6730322580645162}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Eirr_AQc8g1g",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b51887a2-989e-44fe-ab93-52ed26378a18"
      },
      "source": [
        "r = cnn.fit(train,epochs=20, validation_data=test, class_weight=cw, callbacks=callbacks_list)"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:From /usr/local/lib/python3.7/dist-packages/tensorflow/python/ops/array_ops.py:5049: calling gather (from tensorflow.python.ops.array_ops) with validate_indices is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "The `validate_indices` argument has no effect. Indices are always validated on CPU and never validated on GPU.\n",
            "Epoch 1/20\n",
            "163/163 [==============================] - 159s 768ms/step - loss: 0.3580 - accuracy: 0.8252 - val_loss: 0.5916 - val_accuracy: 0.6330\n",
            "Epoch 2/20\n",
            "163/163 [==============================] - 125s 769ms/step - loss: 0.2134 - accuracy: 0.9132 - val_loss: 0.5060 - val_accuracy: 0.7003\n",
            "Epoch 3/20\n",
            "163/163 [==============================] - 125s 768ms/step - loss: 0.1892 - accuracy: 0.9239 - val_loss: 1.2845 - val_accuracy: 0.6490\n",
            "Epoch 4/20\n",
            "163/163 [==============================] - 125s 766ms/step - loss: 0.1757 - accuracy: 0.9331 - val_loss: 0.3109 - val_accuracy: 0.8702\n",
            "Epoch 5/20\n",
            "163/163 [==============================] - 122s 750ms/step - loss: 0.1524 - accuracy: 0.9411 - val_loss: 0.5910 - val_accuracy: 0.8526\n",
            "Epoch 6/20\n",
            "163/163 [==============================] - 122s 748ms/step - loss: 0.1617 - accuracy: 0.9365 - val_loss: 0.2777 - val_accuracy: 0.8798\n",
            "Epoch 7/20\n",
            "163/163 [==============================] - 122s 747ms/step - loss: 0.1385 - accuracy: 0.9459 - val_loss: 0.2307 - val_accuracy: 0.9135\n",
            "Epoch 8/20\n",
            "163/163 [==============================] - 122s 749ms/step - loss: 0.1332 - accuracy: 0.9503 - val_loss: 0.3047 - val_accuracy: 0.8926\n",
            "Epoch 9/20\n",
            "163/163 [==============================] - 122s 745ms/step - loss: 0.1533 - accuracy: 0.9408 - val_loss: 0.3356 - val_accuracy: 0.8494\n",
            "\n",
            "Epoch 00009: ReduceLROnPlateau reducing learning rate to 0.00010000000474974513.\n",
            "Epoch 10/20\n",
            "163/163 [==============================] - 121s 745ms/step - loss: 0.1242 - accuracy: 0.9503 - val_loss: 0.2411 - val_accuracy: 0.9103\n",
            "Epoch 11/20\n",
            "163/163 [==============================] - 122s 750ms/step - loss: 0.1148 - accuracy: 0.9557 - val_loss: 0.2509 - val_accuracy: 0.9183\n",
            "\n",
            "Epoch 00011: ReduceLROnPlateau reducing learning rate to 0.0001.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WlmZc1ngfPPT",
        "outputId": "c89b4d09-eeb8-46ce-9f94-3052ba33b87c"
      },
      "source": [
        "cnn.evaluate(train)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "163/163 [==============================] - 109s 669ms/step - loss: 0.1058 - accuracy: 0.9607\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.10583260655403137, 0.9606978297233582]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rhpeJO8UlE40",
        "outputId": "641031db-6fa5-47e6-9bc3-da785bd80102",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "cnn.evaluate(test)"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "20/20 [==============================] - 5s 238ms/step - loss: 0.2509 - accuracy: 0.9183\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.25090306997299194, 0.9182692170143127]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TOdhXZD1c7kT",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "e91894e4-2338-4344-fcc8-753b67db8678"
      },
      "source": [
        "pd.DataFrame(r.history).plot()"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f33aafbaf90>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WabvnBbzYjtm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3549ae1e-25a4-47c5-b910-9ceec62ecf80"
      },
      "source": [
        "preds = cnn.predict(test,verbose=1)"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "20/20 [==============================] - 5s 222ms/step\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M7pNRGOURv5R"
      },
      "source": [
        "predictions = preds.copy()\n",
        "predictions[predictions <= 0.5] = 0\n",
        "predictions[predictions > 0.5] = 1"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zioov-9cUzoe",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "outputId": "bfe5926e-92cf-4701-f3cc-4ed5444bbe24"
      },
      "source": [
        "from sklearn.metrics import classification_report,confusion_matrix\n",
        "\n",
        "cm = pd.DataFrame(data=confusion_matrix(test.classes, predictions, labels=[0, 1]),\n",
        "                  index=[\"Actual Normal\", \"Actual Pneumonia\"],\n",
        "                  columns=[\"Predicted Normal\", \"Predicted Pneumonia\"])\n",
        "import seaborn as sns\n",
        "sns.heatmap(cm,annot=True,fmt=\"d\")"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f33ad235190>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nbUlSI-dR1EV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9433714c-9d73-4ba8-a745-a493d941f85b"
      },
      "source": [
        " print(classification_report(y_true=test.classes, y_pred=predictions,\n",
        "                            target_names =['NORMAL','PNEUMONIA']\n",
        " ))"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "      NORMAL       0.97      0.81      0.88       234\n",
            "   PNEUMONIA       0.90      0.98      0.94       390\n",
            "\n",
            "    accuracy                           0.92       624\n",
            "   macro avg       0.93      0.90      0.91       624\n",
            "weighted avg       0.92      0.92      0.92       624\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VOCL8wzfS32K",
        "outputId": "fbe6772a-6005-42b1-d07f-892b18b44be3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "from sklearn.metrics import roc_auc_score,plot_roc_curve,roc_curve\n",
        "roc_auc_score(test.classes, cnn.predict(test))"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9680473372781064"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jepCxAZEl9sK",
        "outputId": "bbbfcb94-8642-4fcf-d669-2dcbc13866f6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        }
      },
      "source": [
        "fpr = {}\n",
        "tpr = {}\n",
        "thresh ={}\n",
        "\n",
        "n_class = 2\n",
        "for i in range(n_class):    \n",
        "    fpr[i], tpr[i], thresh[i] = roc_curve(test.classes, cnn.predict(test), pos_label=i)\n",
        "    \n",
        "# plotting    \n",
        "#plt.plot(fpr[0], tpr[0], linestyle='--',color='orange', label='Class 0 vs Rest')\n",
        "plt.plot(fpr[1], tpr[1], linestyle='--',color='green', label='Pneumonia vs Normal')\n",
        "#plt.plot(fpr[2], tpr[2], linestyle='--',color='blue', label='Class 2 vs Rest')\n",
        "plt.title('Binary classification ROC curve')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive rate')\n",
        "plt.legend(loc='best')\n",
        "plt.savefig('Binary class ROC',dpi=300);"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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YUKd9iNlTI1gyrIpTFk2Je4wRBqU7du3M2fOHHr06AHA4sWLue+++1i+fDmrVq3itddeY9u2bVxxxRVMnTqVwsJCLrroIm688cYqt11cXMyzzz7LwoULufHGG2nZsiWLFy+md+/ePPHEEwCcf/753H333SxZsoQePXrwq1/9apfY3nrrLe67775d5iccdNBBvPrqqyxevJhx48Zxww03lCkzfPhwpkwJzgtbt27l5Zdf5pRTTuHhhx/mqquuoqioiEWLFtGhQ4dyj2HYsGG8/fbbrFy5cpf5t956K0cccQRLlizhzjvv5Pzzz9+5bLugZFoAAAyeSURBVPny5bz00ks8/fTTALz33nv87W9/Y/r06Zx77rmccMIJLF26lBYtWjBr1iwALr/8chYuXEhxcTGbN29m5syZVb6/1ZExNQKRhqqyX/Ats1pWujy7ZXa1awAAmzdvJicnBwhqBBdffDELFiygZ8+eO0+KOTk5rF69mjZt2lBcXMxJJ50EwLfffsu+++5b5T5OOOEEWrVqRatWrWjdujWDBw8GoEePHixZsoSNGzfyxRdf0KdPHwAuuOACzjzzzJ3rn3766QAcddRRrF69usz2N27cyAUXXMC//vUvzIxt27aVKTNw4ECuuuoqvvnmG1544QWOP/54WrRoQe/evbnjjjtYu3Ytp59+erm1AQj6Uq677jruuusuBg4cuHP+3//+d6ZNmwbAiSeeyIYNG/jyyy8BOO2002jRosUuMWRlZdGjRw++/fZbBgwYsPN9SBzX3Llz+c1vfkNJSQmfffYZhx566M73qy5EmgjMbADwv0BT4E/u/utSy3cHngCOAjYAw919dZQxiUjVEn0Epe2+++47Xzdt2pTt27fj7hx66KG8/vrrZcrvtttu7NixA6DMte3J22rSpMnO6SZNmqTUfp4on4ijtJtvvpkTTjiB5557jtWrV9O3b98yZZo3b07fvn158cUXmTx5MiNGjADg7LPPplevXsyaNYtBgwYxYcIETjzxxHLjOO+887jrrrvo3r17lTED7LHHHuUeR5MmTcjKytrZ5JN4H7Zs2cKoUaNYtGgRHTt2ZOzYsXV+13lkTUNm1hR4ABgIHAKcZWaHlCp2MfC5u/8AuBe4O6p4RCQa3bp149NPP92ZCLZt28ayZcuA4MqawsJCgGpf3dK6dWv23ntvXn31VQCe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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}